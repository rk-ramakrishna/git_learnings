
Note:
BASH stands for Bourne-Again shell

Note:
If you want to go through multiple pages in command line, use 'space' key and for quit use key 'q'

GIT command syntax:
========================
git <git-options> <command> <command-options> <operands>


GIT configuration settings
=============================================

git config --global user.name "Your Name"                             			Add your name to the global Git configuration
	
git config --global user.email "Your E-mail Address"							Add your email address to the global Git configuration

git config --global core.editor "'C:\Program Files\Notepad++\notepad++.exe' -multiInst -noSession -notabbar"				Configure GIT to use Notepad++ for edit 

git config --global difftool.bc3.path "C:\Program Files\Beyond Compare 4\BCompare.exe"     									To configure difftool path 

git config --global diff.tool bc3																							Tell to GIT to use bc3 as difftool for files comparsion

git config --global difftool.prompt false																					Tell to GIT don't prompt {yes or no} for each file comparsion

git config --list 																Display all the Git configurations

git config user.name															Display the user.name configuration value

git config user.email															Display the user.email configuration value


GIT help
============================================

git help -a																		Print all available Git commands

git help -g																		Print all available Git guides

git help glossary																Display the Git glossary	

git <<command>>  -h																Display all options of command in Bash		
Example:  git config -h 


Add, Delete & Track changes with GIT
=======================================

git init																		Initialize a Git repository in the current directory

git add FILE																	Start tracking FILE in Git; adds FILE to the staging area

git add -f 																		pick part of your changes to add to staging area

git add . 																		To Add all changes in current & sub directory to staging area

git rm --cached file 															Remove file from staging area. Note: Removed file still avilable in working directory

git rename file1 file2															Rename file1 to file2 in the staging area

git reset file																	

git status																		Display status of current working directory, as it relates to Git

git status -s 																	Display status of files in short notation form 
																				short form notations are:  ?? - untracked  A - ADD   M - Modified		

git commit -m "commit message"													commit changes to GIT repository with supplied log message

git commit -am "commit message"													Perform git add and then a git commit with supplied log message
Note:
Above command only works for files which are already tracked by GIT. Above command would not work files which are newly added in working directory, but not added to staging area


git commit --amend -m "commit message"											Update the last commit in git repository with whatever content currently avilable in staging area. 
																				If no updates avilable in staging area, then only the commit message updated
Note: It is not recommended to amend content that has already been pushed to a remote repository where others may be working with it. Operations that rewrite history such as amend 
ideally only be done in your local enviornment before content is initially pushed to the remote repository.



Findout History of commits [git log command has lot of functionality]
================================================================================

git log																			Display the log (history) of the Git repository

git log --stat																	Display the log with the files that were modified

git ls-files																	List the files in the repository

***git status -s																display the status of files in short notation form. 
																				short form notations are:  ?? - untracked  A - ADD   M - Modified

git status -b 																	displays number of commits which are ahead of Head
																				
git gui																			Start Git GUI

git citool																		Start Git GUI to commit changes

***gitk																			Start gitk (git log viewer)

***git commit -m "Message"															Commit changes with the log message entered on command line via the -m switch

**git diff																		Show any changes between the tracked files in the current directory and the repository

***git commit -a -m "Message"													Perform a git add, and then a git commit with the supplied log message
Note: caveat with the -a -m shortcut is that it will not work for new content or files. The first time a file is added to Git, it must have the git add command done first.

git diff –staged																Show any changes between the staging area and the repository

git add																			Add all new files in the current directory (use git status afterward to see what was added)

***git log –shortstat –oneline													Show history using one line per commit, and listing each file changed per commit

git add –dry-run .																Show what git add would do

git remote add origin https://github.com/rk-ramakrishna/git_learnings.git		set remote repository

git push -u origin master														push local repository changes to remote repository




		


